from pymongo import MongoClient
from pymongo.server_api import ServerApi
import os
import certifi
from colorama import Fore, Style

os.environ[
    'SSL_CERT_FILE'] = certifi.where()  # –ø–∞–∫–µ—Ç —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤ CA, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ SSL-—Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤

client = MongoClient(
    "mongodb+srv://nmnysya:Lavanda18@goitproject.cws87xv.mongodb.net/",
    server_api=ServerApi('1')
)

db = client.Cats


def insert_data_to_db(db):
    db.cats.insert_many(
        [
            {
                "name": "Lama",
                "age": 2,
                "features": ["—Ö–æ–¥–∏—Ç—å –≤ –ª–æ—Ç–æ–∫", "–Ω–µ –¥–∞—î —Å–µ–±–µ –≥–ª–∞–¥–∏—Ç–∏", "—Å—ñ—Ä–∏–π"],
            },
            {
                "name": "Liza",
                "age": 4,
                "features": ["—Ö–æ–¥–∏—Ç—å –≤ –ª–æ—Ç–æ–∫", "–¥–∞—î —Å–µ–±–µ –≥–ª–∞–¥–∏—Ç–∏", "–±—ñ–ª–∏–π"],
            },
            {
                "name": "Nina",
                "age": 3,
                "features": ["—Ö–æ–¥–∏—Ç—å –≤ –ª–æ—Ç–æ–∫", "–Ω–µ –¥–∞—î —Å–µ–±–µ –≥–ª–∞–¥–∏—Ç–∏", "–∑–ª—é–∫–∞", "—Ä—É–¥–∏–π"]
            }
        ]
    )


def reading(db):
    result = db.cats.find({})
    print(f"{Fore.LIGHTCYAN_EX}üóÇ–í—Å—ñ –∑–∞–ø–∏—Å–∏ –∫–æ–ª–µ–∫—Ü—ñ—ó [{db.name}]: {Style.RESET_ALL}")
    for idx, el in enumerate(result):
        print(f"\t----> [{idx + 1}] {el}")


def find_info_about_cat(db):
    result = db.cats.find({}, {"_id": 0, "name": 1})
    names = [doc["name"] for doc in result]
    print(f"{Fore.LIGHTCYAN_EX}üóÇ –í—Å—ñ —ñ–º–µ–Ω–∞ –∫–æ—Ç—ñ–≤ —É –∫–æ–ª–µ–∫—Ü—ñ—ó [{db.name}]: {Style.RESET_ALL}")
    for idx, el in enumerate(names):
        print(f"\t----> [{idx + 1}] {el}")

    while True:
        user_input = input(
            f"–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–æ—Ç–∞, —â–æ–± –≤–∏–≤–µ—Å—Ç–∏ —ñ–Ω—Ñ–æ –ø—Ä–æ –Ω—å–æ–≥–æ {[num + 1 for num, name in enumerate(names)]} –∞–±–æ "
            f"–Ω–∞–ø–∏—à—ñ—Ç—å 'exit', —â–æ–± –≤–∏–π—Ç–∏: ")
        if user_input == 'exit':
            break
        elif not user_input.isdigit() or int(user_input) not in range(1, len(names) + 1):
            print("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        else:
            idx = int(user_input) - 1
            cat_name = names[idx]
            print(f"–í–∏ –æ–±—Ä–∞–ª–∏ –∫–æ—Ç–∞ –∑ —ñ–º'—è–º '{cat_name}'.")
            for cat in db.cats.find({'name': cat_name}):
                print(f"üê±–ù–∞–∑–≤–∞ - {cat['name']}\nüîÜ–í—ñ–∫ - {cat['age']}\n‚úÖ–û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ - {cat['features']}")


def update_info_about_cat(db):
    result = db.cats.find({}, {"_id": 0, "name": 1})
    names = [doc["name"] for doc in result]
    print(f"{Fore.LIGHTCYAN_EX}üóÇ –í—Å—ñ —ñ–º–µ–Ω–∞ –∫–æ—Ç—ñ–≤ —É –∫–æ–ª–µ–∫—Ü—ñ—ó [{db.name}]: {Style.RESET_ALL}")
    for idx, el in enumerate(names):
        print(f"\t----> [{idx + 1}] {el}")

    while True:
        user_input = input(
            f"–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–æ—Ç–∞, –≤—ñ–∫ —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ {[num + 1 for num, name in enumerate(names)]} –∞–±–æ "
            f"–Ω–∞–ø–∏—à—ñ—Ç—å 'exit', —â–æ–± –≤–∏–π—Ç–∏: ")
        if user_input == 'exit':
            break
        elif not user_input.isdigit() or int(user_input) not in range(1, len(names) + 1):
            print("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        else:
            idx = int(user_input) - 1
            cat_name = names[idx]
            print(f"–í–∏ –æ–±—Ä–∞–ª–∏ –∫–æ—Ç–∞ –∑ —ñ–º'—è–º '{cat_name}'.")
            for cat in db.cats.find({'name': cat_name}):
                print(f"üîÜ–í—ñ–∫ - {cat['age']}")
            user_input = int(input(f"–í–≤–µ–¥—ñ—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–∏–π –≤—ñ–∫ –¥–ª—è –∫–æ—Ç–∞ {cat_name}\n>>> "))
            db.cats.update_one({"name": cat_name}, {"$set": {"age": str(user_input)}})
            result = db.cats.find_one({"name": cat_name})
            print(f"–î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ >>> ---- ", result)


def update_features_of_cat(db):
    result = db.cats.find({}, {"_id": 0, "name": 1})
    names = [doc["name"] for doc in result]
    print(f"{Fore.LIGHTCYAN_EX}üóÇ –í—Å—ñ —ñ–º–µ–Ω–∞ –∫–æ—Ç—ñ–≤ —É –∫–æ–ª–µ–∫—Ü—ñ—ó [{db.name}]: {Style.RESET_ALL}")
    for idx, el in enumerate(names):
        print(f"\t----> [{idx + 1}] {el}")

    while True:
        user_input = input(
            f"–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–æ—Ç–∞, —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –æ–¥–Ω—É –æ—Å–æ–±–ª–∏–≤—ñ—Å—Ç—å {[num + 1 for num, name in enumerate(names)]} –∞–±–æ "
            f"–Ω–∞–ø–∏—à—ñ—Ç—å 'exit', —â–æ–± –≤–∏–π—Ç–∏: ")
        if user_input == 'exit':
            break
        elif not user_input.isdigit() or int(user_input) not in range(1, len(names) + 1):
            print("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        else:
            idx = int(user_input) - 1
            cat_name = names[idx]
            print(f"–í–∏ –æ–±—Ä–∞–ª–∏ –∫–æ—Ç–∞ –∑ —ñ–º'—è–º '{cat_name}'.")
            cat = db.cats.find_one({'name': cat_name})
            if cat:
                print(f"üîÜ –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ - {cat['features']}")
                new_feature = input(f"–î–æ–¥–∞–π—Ç–µ —â–µ –æ–¥–Ω—É –æ—Å–æ–±–ª–∏–≤—ñ—Ç—å –∫–æ—Ç—É {cat_name} –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å 'exit', —â–æ–± –≤–∏–π—Ç–∏: ")
                if new_feature == 'exit':
                    break
                elif new_feature.strip():  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ç–µ, —â–æ —Ä—è–¥–æ–∫ –Ω–µ —î –ø–æ—Ä–æ–∂–Ω—ñ–º
                    new_features = cat.get('features',
                                           [])  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç–µ–π –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
                    new_features.append(new_feature)
                    db.cats.update_one({"name": cat_name}, {"$set": {"features": new_features}})
                    print("–û—Å–æ–±–ª–∏–≤—ñ—Å—Ç—å —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞.")
                else:
                    print("–í–∏ –Ω–µ –≤–≤–µ–ª–∏ –∂–æ–¥–Ω–æ—ó –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ.")
            else:
                print(f"–ö–æ—Ç –∑ —ñ–º'—è–º '{cat_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")


def delete_doc_by_name_of_cat(db):
    result = db.cats.find({}, {"_id": 0, "name": 1})
    names = [doc["name"] for doc in result]
    print(f"{Fore.LIGHTCYAN_EX}üóÇ –í—Å—ñ —ñ–º–µ–Ω–∞ –∫–æ—Ç—ñ–≤ —É –∫–æ–ª–µ–∫—Ü—ñ—ó [{db.name}]: {Style.RESET_ALL}")
    for idx, el in enumerate(names):
        print(f"\t----> [{idx + 1}] {el}")

    while True:
        user_input = input(
            f"–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–æ—Ç–∞, —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏{[num + 1 for num, name in enumerate(names)]} –∞–±–æ "
            f"–Ω–∞–ø–∏—à—ñ—Ç—å 'exit', —â–æ–± –≤–∏–π—Ç–∏: ")
        if user_input == 'exit':
            break
        elif not user_input.isdigit() or int(user_input) not in range(1, len(names) + 1):
            print("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        else:
            idx = int(user_input) - 1
            cat_name = names[idx]
            print(f"–í–∏ –æ–±—Ä–∞–ª–∏ –∫–æ—Ç–∞ –∑ —ñ–º'—è–º '{cat_name}'.")
            cat = db.cats.find_one({'name': cat_name})
            if cat:
                db.cats.delete_one({"name": cat_name})
                print(f"K–æ—Ç–∞ –∑ —ñ–º–µ–Ω–µ {cat_name} –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
            else:
                print(f"–ö–æ—Ç –∑ —ñ–º'—è–º '{cat_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")


def delete_all_docs(db):
    result = db.cats.find({}, {"_id": 0, "name": 1})
    names = [doc["name"] for doc in result]
    print(f"{Fore.LIGHTCYAN_EX}üóÇ –í—Å—ñ —ñ–º–µ–Ω–∞ –∫–æ—Ç—ñ–≤ —É –∫–æ–ª–µ–∫—Ü—ñ—ó [{db.name}]: {Style.RESET_ALL}")
    for idx, el in enumerate(names):
        print(f"\t----> [{idx + 1}] {el}")

    print("–ü—Ä–æ—Ü–µ—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —É –∫–æ–ª–µ–∫—Ü—ñ—ó")

    confirmation = input("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ –±–∞–∂–∞—î—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏? (yes/no): ")
    if confirmation.lower() == "yes":
        db.cats.delete_many({})
        print("–í—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        print("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")


while True:
    user_input = input("\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:\n"
                       "1. –í–∏–≤–µ–¥–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ —ñ–∑ –∫–æ–ª–µ–∫—Ü—ñ—ó\n"
                       "2. –í–∏–≤–µ–¥–µ–Ω–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ç–∞ –∑–∞ –≤–≤–µ–¥–µ–Ω–∏–º —ñ–º–µ–Ω–µ–º\n"
                       "3. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–∫—É –∫–æ—Ç–∞ –∑–∞ —ñ–º'—è–º\n"
                       "4. –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ —Å–ø–∏—Å–∫—É features –∫–æ—Ç–∞ –∑–∞ —ñ–º'—è–º\n"
                       "5. –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó –∑–∞ —ñ–º'—è–º —Ç–≤–∞—Ä–∏–Ω–∏\n"

                       "6. –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ —ñ–∑ –∫–æ–ª–µ–∫—Ü—ñ—ó\n"
                       "7. –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–±–æ—Ç—É\n"
                       "8. –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó –¥–∞–Ω–∏–º–∏\n"
                       ">>> ")
    if user_input not in ["1", "2", "3", "4", "5", "6", "7", "8"]:
        print("–¢–∞–∫–æ—ó –æ–ø—Ü—ñ—ó, –Ω–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    elif user_input == "7":
        print("–†–æ–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        exit()
    elif user_input == "1":
        reading(db)
    elif user_input == "2":
        find_info_about_cat(db)
    elif user_input == "3":
        update_info_about_cat(db)
    elif user_input == "4":
        update_features_of_cat(db)
    elif user_input == "5":
        delete_doc_by_name_of_cat(db)
    elif user_input == "6":
        delete_all_docs(db)
    elif user_input == "8":
        insert_data_to_db(db)


